import { render, screen, fireEvent } from '@testing-library/react';
import axios from 'axios';
import MockAdapter from 'axios-mock-adapter';
import Signup from './src/components/Signup';
import { expect } from 'chai';

describe('Environment Variables', () => {
    it('should have REACT_APP_API_URL set to http://localhost:4200', () => {
        expect(process.env.REACT_APP_API_URL).toBe('http://localhost:4200');
    });
});

describe('Signup Component', () => {
    const mock = new MockAdapter(axios);

    beforeEach(() => {
        mock.reset();
    });

    it('should display an error message when email is already registered', async () => {
        mock.onPost(`${process.env.REACT_APP_API_URL}/auth/signup`).reply(400, {
            message: 'Email is already registered',
        });

        render(<Signup />);

        fireEvent.change(screen.getByPlaceholderText('Enter username'), {
            target: { value: 'testuser' },
        });
        fireEvent.change(screen.getByPlaceholderText('Enter email'), {
            target: { value: 'testuser@example.com' },
        });
        fireEvent.change(screen.getByPlaceholderText('Enter password'), {
            target: { value: 'password123' },
        });
        fireEvent.change(screen.getByPlaceholderText('Confirm password'), {
            target: { value: 'password123' },
        });

        fireEvent.click(screen.getByText('Signup'));

        const errorMessage = await screen.findByText('Signup failed. Please try again.');
        expect(errorMessage).toBeInTheDocument();
    });
});